import Product from '../../models/productModel.js';

const productStates = {};

export function setupProductHandlers(bot) {
  bot.onText(/\/addproduct/, async (msg) => {
    const chatId = msg.chat.id;
    productStates[chatId] = {
      step: 'name_en',
      product: {},
    };

    bot.sendMessage(
      chatId,
      'üÜï –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç!\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:',
    );
  });

  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!productStates[chatId]) return;

    const state = productStates[chatId];

    switch (state.step) {
      case 'name_en':
        state.product.name = { en: text };
        state.step = 'name_ru';
        bot.sendMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:');
        break;

      case 'name_ru':
        state.product.name.ru = text;
        state.step = 'name_uk';
        bot.sendMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º:');
        break;

      case 'name_uk':
        state.product.name.uk = text;
        state.step = 'metal';
        bot.sendMessage(chatId, 'ü™ô –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ç–∞–ª–ª–∞:', {
          reply_markup: {
            keyboard: [['white gold', 'yellow gold', 'rose gold']],
            one_time_keyboard: true,
          },
        });
        break;

      case 'metal':
        if (!['white gold', 'yellow gold', 'rose gold'].includes(text)) {
          bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –º–µ—Ç–∞–ª–ª–∞:');
          return;
        }
        state.product.metal = { value: text };
        state.step = 'cutForm';
        bot.sendMessage(chatId, 'üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–≥—Ä–∞–Ω–∫–∏:', {
          reply_markup: {
            keyboard: [
              ['asher', 'pear', 'round'],
              ['cushion', 'marquise', 'oval'],
              ['princess', 'radiant', 'heart'],
              ['emerald'],
            ],
            one_time_keyboard: true,
          },
        });
        break;

      case 'cutForm':
        const validCutForms = [
          'asher',
          'pear',
          'round',
          'cushion',
          'marquise',
          'oval',
          'princess',
          'radiant',
          'heart',
          'emerald',
        ];
        if (!validCutForms.includes(text)) {
          bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–æ—Ä–º—É –æ–≥—Ä–∞–Ω–∫–∏:');
          return;
        }
        state.product.cutForm = { value: text };
        state.step = 'style';
        bot.sendMessage(chatId, 'üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:', {
          reply_markup: {
            keyboard: [
              ['solitaire', 'halo', 'three-stone'],
              ['vintage', 'cluster', 'sidestone'],
            ],
            one_time_keyboard: true,
          },
        });
        break;

      case 'style':
        const validStyles = ['solitaire', 'halo', 'three-stone', 'vintage', 'cluster', 'sidestone'];
        if (!validStyles.includes(text)) {
          bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∏–ª—å:');
          return;
        }
        state.product.style = text;
        state.step = 'color';
        bot.sendMessage(chatId, 'üé® –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –∏–∑–¥–µ–ª–∏—è:');
        break;

      case 'color':
        state.product.color = text;
        state.step = 'weight';
        bot.sendMessage(chatId, '‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏–∑–¥–µ–ª–∏—è (–≤ –≥—Ä–∞–º–º–∞—Ö):');
        break;

      case 'weight':
        if (isNaN(text)) {
          bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞:');
          return;
        }
        state.product.weight = Number(text);
        state.step = 'carats';
        bot.sendMessage(chatId, 'üíé –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ä–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç":');
        break;

      case 'carats':
        if (text.toLowerCase() !== '–Ω–µ—Ç') {
          if (isNaN(text)) {
            bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–∞—Ä–∞—Ç:');
            return;
          }
          state.product.carats = Number(text);
        }
        state.step = 'clarity';
        bot.sendMessage(chatId, '‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å—Ç–æ—Ç—É –∫–∞–º–Ω—è:', {
          reply_markup: {
            keyboard: [
              ['IF', 'VVS1', 'VVS2'],
              ['VS1', 'VS2', 'SI1'],
              ['SI2', 'I1', 'I2'],
              ['I3', '–ù–µ—Ç'],
            ],
            one_time_keyboard: true,
          },
        });
        break;

      case 'clarity':
        const validClarity = ['IF', 'VVS1', 'VVS2', 'VS1', 'VS2', 'SI1', 'SI2', 'I1', 'I2', 'I3'];
        if (text !== '–ù–µ—Ç' && !validClarity.includes(text)) {
          bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —á–∏—Å—Ç–æ—Ç—É:');
          return;
        }
        if (text !== '–ù–µ—Ç') {
          state.product.clarity = text;
        }
        state.step = 'purity';
        bot.sendMessage(chatId, 'üíØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±—É:', {
          reply_markup: {
            keyboard: [['750', '585', '375', '916', '999']],
            one_time_keyboard: true,
          },
        });
        break;

      case 'purity':
        const validPurity = [750, 585, 375, 916, 999];
        if (!validPurity.includes(Number(text))) {
          bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø—Ä–æ–±—É:');
          return;
        }
        state.product.purity = Number(text);
        state.step = 'price';
        bot.sendMessage(chatId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:');
        break;

      case 'price':
        if (isNaN(text)) {
          bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã:');
          return;
        }
        state.product.price = Number(text);
        state.step = 'discount';
        bot.sendMessage(chatId, 'üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "0":');
        break;

      case 'discount':
        const discount = Number(text);
        if (isNaN(discount) || discount < 0 || discount > 100) {
          bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å–∫–∏–¥–∫–∏ (0-100):');
          return;
        }
        state.product.discount = discount;
        state.step = 'bestseller';
        bot.sendMessage(chatId, 'üåü –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä–æ–º?', {
          reply_markup: {
            keyboard: [['–î–∞', '–ù–µ—Ç']],
            one_time_keyboard: true,
          },
        });
        break;

      case 'bestseller':
        if (!['–î–∞', '–ù–µ—Ç'].includes(text)) {
          bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç":');
          return;
        }
        state.product.bestseller = text === '–î–∞';
        state.step = 'description_en';
        bot.sendMessage(chatId, 'üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:');
        break;

      case 'description_en':
        state.product.description = { en: text };
        state.step = 'description_ru';
        bot.sendMessage(chatId, 'üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:');
        break;

      case 'description_ru':
        state.product.description.ru = text;
        state.step = 'description_uk';
        bot.sendMessage(chatId, 'üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º:');
        break;

      case 'description_uk':
        state.product.description.uk = text;
        state.step = 'collection';
        bot.sendMessage(chatId, 'üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:');
        break;

      case 'collection':
        state.product.collection = text;
        state.step = 'size';
        bot.sendMessage(
          chatId,
          'üìè –í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (—á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 16.5,17,17.5) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–í—Å–µ —Ä–∞–∑–º–µ—Ä—ã":',
          {
            reply_markup: {
              keyboard: [['–í—Å–µ —Ä–∞–∑–º–µ—Ä—ã']],
              one_time_keyboard: true,
            },
          },
        );
        break;

      case 'size':
        try {
          let sizes;
          if (text === '–í—Å–µ —Ä–∞–∑–º–µ—Ä—ã') {
            sizes = Array.from({ length: 10 }, (_, i) => 15 + i * 0.5);
          } else {
            sizes = text.split(',').map((size) => Number(size.trim()));
            if (sizes.some((size) => isNaN(size))) throw new Error('Invalid size');
          }
          state.product.size = sizes;

          try {
            const newProduct = new Product({
              ...state.product,
              image: ['placeholder.jpg'],
              isAvailable: true,
              reviews: [],
              sales: 0,
            });
            await newProduct.save();
            bot.sendMessage(
              chatId,
              `‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: ${sizes.join(', ')}`,
            );
          } catch (error) {
            bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ${error.message}`);
          }

          delete productStates[chatId];
        } catch (error) {
          bot.sendMessage(
            chatId,
            '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–í—Å–µ —Ä–∞–∑–º–µ—Ä—ã":',
          );
        }
        break;
    }
  });
}
