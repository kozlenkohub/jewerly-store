import { mainKeyboard, productsKeyboard, adminKeyboard } from '../config/keyboards.js';
import TelegramUser from '../../models/telegramModel.js';
import { handleOrders } from './orderHandlers.js'; // Import the new function

let adminState = {};

export const setupMainHandlers = (bot) => {
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const isAuthorized = await TelegramUser.checkAuthorization(chatId);

    if (!isAuthorized) {
      return bot.sendMessage(
        chatId,
        '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
      );
    }

    bot.sendMessage(
      chatId,
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:',
      mainKeyboard,
    );
  });

  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username;
    const text = msg.text;

    const isAuthorized = await TelegramUser.checkAuthorization(chatId);

    if (!isAuthorized) {
      await TelegramUser.createOrUpdate(chatId, username);
      return bot.sendMessage(
        chatId,
        '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
      );
    }

    // Handle admin state inputs
    if (adminState[chatId]) {
      const { action } = adminState[chatId];

      if (action === 'add_user') {
        bot.emit('text', msg, [`/adduser ${text}`]);
        delete adminState[chatId];
        return;
      } else if (action === 'add_id') {
        bot.emit('text', msg, [`/addid ${text}`]);
        delete adminState[chatId];
        return;
      }
    }

    switch (text) {
      case 'üì¶ –¢–æ–≤–∞—Ä—ã':
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', productsKeyboard);
        break;
      case 'üõç –ó–∞–∫–∞–∑—ã':
        handleOrders(bot, msg); // Call the exported function directly
        break;
      case 'üåê –ü–µ—Ä–µ–≤–æ–¥—ã':
        bot.emit('text', msg, ['/edit_translations']);
        break;
      case '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å':
        bot.sendMessage(chatId, '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:', adminKeyboard);
        break;
      case '‚ùì –ü–æ–º–æ—â—å':
        bot.sendMessage(
          chatId,
          '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
            '/start - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n' +
            '/addproduct - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä\n' +
            '/orders - –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤\n' +
            '/edit_translations - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤\n',
        );
        break;
    }
  });

  bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;

    if (query.data === 'add_user_prompt') {
      adminState[chatId] = { action: 'add_user' };
      bot.sendMessage(chatId, 'üë§ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):');
      bot.answerCallbackQuery(query.id);
    } else if (query.data === 'add_id_prompt') {
      adminState[chatId] = { action: 'add_id' };
      bot.sendMessage(chatId, 'üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
      bot.answerCallbackQuery(query.id);
    } else if (query.data === 'add_product') {
      bot.emit('text', { chat: { id: chatId } }, ['/addproduct']);
    } else if (query.data === 'list_products') {
      bot.sendMessage(chatId, '–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    } else if (query.data === 'view_orders') {
      bot.emit('text', { chat: { id: chatId } }, ['/orders']);
      bot.answerCallbackQuery(query.id);
    }
  });
};
