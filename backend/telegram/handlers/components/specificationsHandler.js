import Product from '../../../models/productModel.js';
import Category from '../../../models/categoryModel.js';
import { productStates } from '../productHandlers.js';

const goldColors = ['Y', 'W', 'R', 'RG', 'H', 'C', 'I', 'G', 'B'];

export const handleSpecifications = async (bot, msg, state) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  switch (state.step) {
    case 'color':
      if (!goldColors.includes(text.toUpperCase())) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:', {
          reply_markup: {
            keyboard: [
              ['Y', 'W', 'R'],
              ['RG', 'H', 'C'],
              ['I', 'G', 'B'],
            ],
            one_time_keyboard: true,
            resize_keyboard: true,
          },
        });
        return false;
      }
      state.product.color = text.toUpperCase();
      state.step = 'weight';
      bot.sendMessage(chatId, '‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏–∑–¥–µ–ª–∏—è (–≤ –≥—Ä–∞–º–º–∞—Ö):', {
        reply_markup: { remove_keyboard: true },
      });
      break;

    case 'weight':
      const weight = parseFloat(text);
      if (isNaN(weight) || weight <= 0) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5)');
        return false;
      }
      state.product.weight = weight;
      state.step = 'carats';
      bot.sendMessage(chatId, 'üíé –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ä–∞—Ç—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:', {
        reply_markup: {
          keyboard: [['0.5', '1.0', '1.5'], ['2.0', '2.5', '3.0'], ['–Ω–µ—Ç']],
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      });
      break;

    case 'carats':
      if (text.toLowerCase() === '–Ω–µ—Ç') {
        state.step = 'clarity';
        bot.sendMessage(chatId, '‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å—Ç–æ—Ç—É –∫–∞–º–Ω—è:', {
          reply_markup: {
            keyboard: [['IF', 'VVS1', 'VVS2'], ['VS1', 'VS2', 'SI1'], ['SI2', 'I1', 'I2'], ['–Ω–µ—Ç']],
            one_time_keyboard: true,
            resize_keyboard: true,
          },
        });
        break;
      }
      const carats = parseFloat(text);
      if (isNaN(carats) || carats <= 0) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä–∞—Ç –∏–ª–∏ "–Ω–µ—Ç"');
        return false;
      }
      state.product.carats = carats;
      state.step = 'clarity';
      bot.sendMessage(chatId, '‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å—Ç–æ—Ç—É –∫–∞–º–Ω—è:', {
        reply_markup: {
          keyboard: [['IF', 'VVS1', 'VVS2'], ['VS1', 'VS2', 'SI1'], ['SI2', 'I1', 'I2'], ['–Ω–µ—Ç']],
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      });
      break;

    case 'clarity':
      const validClarity = ['IF', 'VVS1', 'VVS2', 'VS1', 'VS2', 'SI1', 'SI2', 'I1', 'I2'];
      if (text.toLowerCase() === '–Ω–µ—Ç') {
        state.step = 'purity';
        bot.sendMessage(chatId, 'üíØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±—É:', {
          reply_markup: {
            keyboard: [
              ['750', '585'],
              ['375', '916', '999'],
            ],
            one_time_keyboard: true,
            resize_keyboard: true,
          },
        });
        break;
      }
      if (!validClarity.includes(text)) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å—Ç–æ—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
        return false;
      }
      state.product.clarity = text;
      state.step = 'purity';
      bot.sendMessage(chatId, 'üíØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±—É:', {
        reply_markup: {
          keyboard: [
            ['750', '585'],
            ['375', '916', '999'],
          ],
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      });
      break;

    case 'purity':
      const validPurity = [750, 585, 375, 916, 999];
      if (!validPurity.includes(Number(text))) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', {
          reply_markup: {
            keyboard: [
              ['750', '585'],
              ['375', '916', '999'],
            ],
            one_time_keyboard: true,
            resize_keyboard: true,
          },
        });
        return false;
      }
      state.product.purity = Number(text);
      state.step = 'price';
      bot.sendMessage(chatId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:', {
        reply_markup: { remove_keyboard: true },
      });
      break;

    case 'price':
      const price = parseFloat(text);
      if (isNaN(price) || price <= 0) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É —Ü–∏—Ñ—Ä–∞–º–∏');
        return false;
      }
      state.product.price = price;
      state.step = 'discount';
      bot.sendMessage(chatId, 'üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:', {
        reply_markup: {
          keyboard: [
            ['0', '5', '10'],
            ['15', '20', '25'],
          ],
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      });
      return true;

    case 'discount':
      const discount = Number(text);
      if (isNaN(discount) || discount < 0 || discount > 100) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –æ—Ç 0 –¥–æ 100:', {
          reply_markup: {
            keyboard: [
              ['0', '5', '10'],
              ['15', '20', '25'],
            ],
            one_time_keyboard: true,
            resize_keyboard: true,
          },
        });
        return false;
      }
      state.product.discount = discount;
      state.step = 'bestseller';
      bot.sendMessage(chatId, 'üåü –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä–æ–º?', {
        reply_markup: {
          keyboard: [['–î–∞', '–ù–µ—Ç']],
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      });
      return true;

    case 'bestseller':
      if (!['–î–∞', '–ù–µ—Ç'].includes(text)) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç":', {
          reply_markup: {
            keyboard: [['–î–∞', '–ù–µ—Ç']],
            one_time_keyboard: true,
            resize_keyboard: true,
          },
        });
        return false;
      }
      state.product.bestseller = text === '–î–∞';
      state.step = 'description_en';
      bot.sendMessage(chatId, 'üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:');
      return true;

    case 'description_en':
      state.product.description = { en: text };
      state.step = 'description_ru';
      bot.sendMessage(chatId, 'üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:');
      return true;

    case 'description_ru':
      state.product.description.ru = text;
      state.step = 'description_uk';
      bot.sendMessage(chatId, 'üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º:');
      return true;

    case 'description_uk':
      state.product.description.uk = text;
      state.step = 'category';
      try {
        const categories = await Category.find({});
        let categoryKeyboard = categories.map((cat) => [cat.name.ru || cat.name.en]);
        if (categories.length === 0) {
          categoryKeyboard = [['Null']]; // Add "Null" button if no categories
          bot.sendMessage(
            chatId,
            '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ "Null" –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
            {
              reply_markup: {
                keyboard: categoryKeyboard,
                one_time_keyboard: true,
                resize_keyboard: true,
              },
            },
          );
          return true;
        }
        categoryKeyboard.push(['Null']); // Add "Null" button
        bot.sendMessage(chatId, 'üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
          reply_markup: {
            keyboard: categoryKeyboard,
            one_time_keyboard: true,
            resize_keyboard: true,
          },
        });
        return true;
      } catch (error) {
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${error.message}`);
        return false;
      }

    case 'category':
      if (text === 'Null') {
        state.product.category = null;
        state.step = 'collection';
        bot.sendMessage(chatId, 'üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:');
        return true;
      }
      try {
        const selectedCategory = await Category.findOne({
          $or: [{ 'name.ru': text }, { 'name.en': text }],
        });
        if (!selectedCategory) {
          bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.');
          return false;
        }
        state.product.category = selectedCategory._id;
        state.step = 'collection';
        bot.sendMessage(chatId, 'üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:');
        return true;
      } catch (error) {
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error.message}`);
        return false;
      }

    case 'collection':
      if (!text || text.trim().length === 0) {
        bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        return false;
      }
      state.product.collection = text.trim();
      state.step = 'size';
      bot.sendMessage(
        chatId,
        'üìè –í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (—á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 16.5,17,17.5) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–í—Å–µ —Ä–∞–∑–º–µ—Ä—ã":',
        {
          reply_markup: {
            keyboard: [['–í—Å–µ —Ä–∞–∑–º–µ—Ä—ã']],
            one_time_keyboard: true,
            resize_keyboard: true,
          },
        },
      );
      return true;

    case 'size':
      try {
        let sizes;
        if (text === '–í—Å–µ —Ä–∞–∑–º–µ—Ä—ã') {
          sizes = Array.from({ length: 10 }, (_, i) => 15 + i * 0.5);
        } else {
          sizes = text.split(',').map((size) => Number(size.trim()));
          if (sizes.some((size) => isNaN(size))) throw new Error('Invalid size');
        }
        state.product.size = sizes;

        // Final validation before creating product
        if (!state.product.collection) {
          bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏');
          state.step = 'collection';
          bot.sendMessage(chatId, 'üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:');
          return false;
        }

        try {
          const newProduct = new Product({
            ...state.product,
            isAvailable: true,
            reviews: [],
            sales: 0,
          });
          await newProduct.save();
          bot.sendMessage(
            chatId,
            `‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${state.product.image.length}`,
            { reply_markup: { remove_keyboard: true } },
          );
          delete productStates[chatId];
        } catch (error) {
          bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ${error.message}`);
          return false;
        }
        return true;
      } catch (error) {
        bot.sendMessage(
          chatId,
          '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–í—Å–µ —Ä–∞–∑–º–µ—Ä—ã":',
        );
        return false;
      }
  }
  return true;
};
